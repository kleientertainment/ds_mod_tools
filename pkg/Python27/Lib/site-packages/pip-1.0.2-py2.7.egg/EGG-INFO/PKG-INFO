Metadata-Version: 1.0
Name: pip
Version: 1.0.2
Summary: pip installs packages. Python packages. An easy_install replacement
Home-page: http://www.pip-installer.org
Author: The pip developers
Author-email: python-virtualenv@groups.google.com
License: MIT
Description: pip
        ===
        
        pip is a tool for installing and managing Python packages, such as those
        found in the `Python Package Index <http://pypi.python.org/pypi>`_.
        
        pip is a replacement for `easy_install
        <http://peak.telecommunity.com/DevCenter/EasyInstall>`_.  It mostly
        uses the same techniques for finding packages, so packages that are
        easy_installable should be pip-installable as well.  This means that
        you can use ``pip install SomePackage`` instead of ``easy_install
        SomePackage``.
        
        In order to use pip, you must first install `setuptools
        <http://pypi.python.org/pypi/setuptools>`_ or `distribute
        <http://pypi.python.org/pypi/distribute>`_.  If you use `virtualenv
        <http://www.virtualenv.org>`_, a copy of pip will be automatically be
        installed in each virtual environment you create.
        
        .. comment: 
        
        The main website for pip is `www.pip-installer.org
        <http://www.pip-installer.org>`_.  You can also install
        the `in-development version <https://github.com/pypa/pip/tarball/develop#egg=pip-dev>`_
        of pip with ``easy_install pip==dev``.
        
        
        
        Usage
        -----
        
        Once you have pip, you can use it like this::
        
            $ pip install SomePackage
        
        SomePackage is some package you'll find on `PyPI
        <http://pypi.python.org/pypi/>`_.  This installs the package and all
        its dependencies.
        
        pip does other stuff too, with packages, but install is the biggest
        one.  You can ``pip uninstall`` too.
        
        You can also install from a URL (that points to a tar or zip file),
        install from some version control system (use URLs like
        ``hg+http://domain/repo`` -- or prefix ``git+``, ``svn+`` etc).  pip
        knows a bunch of stuff about revisions and stuff, so if you need to do
        things like install a very specific revision from a repository pip can
        do that too.
        
        If you've ever used ``python setup.py develop``, you can do something
        like that with ``pip install -e ./`` -- this works with packages that
        use ``distutils`` too (usually this only works with Setuptools
        projects).
        
        You can use ``pip install --upgrade SomePackage`` to upgrade to a
        newer version, or ``pip install SomePackage==1.0.4`` to install a very
        specific version.
        
        Pip Compared To easy_install
        ----------------------------
        
        pip is meant to improve on easy_install.  Some of the improvements:
        
        * All packages are downloaded before installation.  Partially-completed
          installation doesn't occur as a result.
        
        * Care is taken to present useful output on the console.
        
        * The reasons for actions are kept track of.  For instance, if a package is
          being installed, pip keeps track of why that package was required.
        
        * Error messages should be useful.
        
        * The code is relatively concise and cohesive, making it easier to use
          programmatically.
        
        * Packages don't have to be installed as egg archives, they can be installed
          flat (while keeping the egg metadata).
        
        * Native support for other version control systems (Git, Mercurial and Bazaar)
        
        * Uninstallation of packages.
        
        * Simple to define fixed sets of requirements and reliably reproduce a
          set of packages.
        
        pip doesn't do everything that easy_install does. Specifically:
        
        * It cannot install from eggs.  It only installs from source.  (In the
          future it would be good if it could install binaries from Windows ``.exe``
          or ``.msi`` -- binary install on other platforms is not a priority.)
        
        * It doesn't understand Setuptools extras (like ``package[test]``).  This should
          be added eventually.
        
        * It is incompatible with some packages that extensively customize distutils
          or setuptools in their ``setup.py`` files.
        
        pip is complementary with `virtualenv
        <http://pypi.python.org/pypi/virtualenv>`__, and it is encouraged that you use
        virtualenv to isolate your installation.
        
        Community
        ---------
        
        The homepage for pip is at `pip-installer.org <http://www.pip-installer.org/>`_.
        Bugs can be filed in the `pip issue tracker
        <https://github.com/pypa/pip/issues/>`_.  Discussion happens on the
        `virtualenv email group
        <http://groups.google.com/group/python-virtualenv?hl=en>`_.
        
        Uninstall
        ---------
        
        pip is able to uninstall most installed packages with ``pip uninstall
        package-name``.
        
        Known exceptions include pure-distutils packages installed with
        ``python setup.py install`` (such packages leave behind no metadata allowing
        determination of what files were installed), and script wrappers installed
        by develop-installs (``python setup.py develop``).
        
        pip also performs an automatic uninstall of an old version of a package
        before upgrading to a newer version, so outdated files (and egg-info data)
        from conflicting versions aren't left hanging around to cause trouble. The
        old version of the package is automatically restored if the new version
        fails to download or install.
        
        .. _`requirements file`:
        
        Requirements Files
        ------------------
        
        When installing software, and Python packages in particular, it's common that
        you get a lot of libraries installed.  You just did ``easy_install MyPackage``
        and you get a dozen packages.  Each of these packages has its own version.
        
        Maybe you ran that installation and it works.  Great!  Will it keep working?
        Did you have to provide special options to get it to find everything?  Did you
        have to install a bunch of other optional pieces?  Most of all, will you be able
        to do it again?  Requirements files give you a way to create an *environment*:
        a *set* of packages that work together.
        
        If you've ever tried to setup an application on a new system, or with slightly
        updated pieces, and had it fail, pip requirements are for you.  If you
        haven't had this problem then you will eventually, so pip requirements are
        for you too -- requirements make explicit, repeatable installation of packages.
        
        So what are requirements files?  They are very simple: lists of packages to
        install.  Instead of running something like ``pip MyApp`` and getting
        whatever libraries come along, you can create a requirements file something like::
        
            MyApp
            Framework==0.9.4
            Library>=0.2
        
        Then, regardless of what MyApp lists in ``setup.py``, you'll get a
        specific version of Framework (0.9.4) and at least the 0.2 version of
        Library.  (You might think you could list these specific versions in
        MyApp's ``setup.py`` -- but if you do that you'll have to edit MyApp
        if you want to try a new version of Framework, or release a new
        version of MyApp if you determine that Library 0.3 doesn't work with
        your application.)  You can also add optional libraries and support
        tools that MyApp doesn't strictly require, giving people a set of
        recommended libraries.
        
        You can also include "editable" packages -- packages that are checked out from
        Subversion, Git, Mercurial and Bazaar.  These are just like using the ``-e``
        option to pip.  They look like::
        
            -e svn+http://myrepo/svn/MyApp#egg=MyApp
        
        You have to start the URL with ``svn+`` (``git+``, ``hg+`` or ``bzr+``), and
        you have to include ``#egg=Package`` so pip knows what to expect at that URL.
        You can also include ``@rev`` in the URL, e.g., ``@275`` to check out
        revision 275.
        
        Requirement files are mostly *flat*.  Maybe ``MyApp`` requires
        ``Framework``, and ``Framework`` requires ``Library``.  I encourage
        you to still list all these in a single requirement file; it is the
        nature of Python programs that there are implicit bindings *directly*
        between MyApp and Library.  For instance, Framework might expose one
        of Library's objects, and so if Library is updated it might directly
        break MyApp.  If that happens you can update the requirements file to
        force an earlier version of Library, and you can do that without
        having to re-release MyApp at all.
        
        Read the `requirements file format <http://pip.openplans.org/requirement-format.html>`_ to
        learn about other features.
        
        Freezing Requirements
        ---------------------
        
        So you have a working set of packages, and you want to be able to install them
        elsewhere.  `Requirements files`_ let you install exact versions, but it won't
        tell you what all the exact versions are.
        
        To create a new requirements file from a known working environment, use::
        
            $ pip freeze > stable-req.txt
        
        This will write a listing of *all* installed libraries to ``stable-req.txt``
        with exact versions for every library.  You may want to edit the file down after
        generating (e.g., to eliminate unnecessary libraries), but it'll give you a
        stable starting point for constructing your requirements file.
        
        You can also give it an existing requirements file, and it will use that as a
        sort of template for the new file.  So if you do::
        
            $ pip freeze -r devel-req.txt > stable-req.txt
        
        it will keep the packages listed in ``devel-req.txt`` in order and preserve
        comments.
        
        Bundles
        -------
        
        Another way to distribute a set of libraries is a bundle format (specific to
        pip).  This format is not stable at this time (there simply hasn't been
        any feedback, nor a great deal of thought).  A bundle file contains all the
        source for your package, and you can have pip install them all together.
        Once you have the bundle file further network access won't be necessary.  To
        build a bundle file, do::
        
            $ pip bundle MyApp.pybundle MyApp
        
        (Using a `requirements file`_ would be wise.)  Then someone else can get the
        file ``MyApp.pybundle`` and run::
        
            $ pip install MyApp.pybundle
        
        This is *not* a binary format.  This only packages source.  If you have binary
        packages, then the person who installs the files will have to have a compiler,
        any necessary headers installed, etc.  Binary packages are hard, this is
        relatively easy.
        
        Using pip with virtualenv
        -------------------------
        
        pip is most nutritious when used with `virtualenv
        <http://pypi.python.org/pypi/virtualenv>`__.  One of the reasons pip
        doesn't install "multi-version" eggs is that virtualenv removes much of the need
        for it.  Because pip is installed by virtualenv, just use
        ``path/to/my/environment/bin/pip`` to install things into that
        specific environment.
        
        To tell pip to only run if there is a virtualenv currently activated,
        and to bail if not, use::
        
            export PIP_REQUIRE_VIRTUALENV=true
        
        To tell pip to automatically use the currently active virtualenv::
        
            export PIP_RESPECT_VIRTUALENV=true
        
        Providing an environment with ``-E`` will be ignored.
        
        Using pip with virtualenvwrapper
        ---------------------------------
        
        If you are using `virtualenvwrapper
        <http://www.doughellmann.com/projects/virtualenvwrapper/>`_, you might
        want pip to automatically create its virtualenvs in your
        ``$WORKON_HOME``.
        
        You can tell pip to do so by defining ``PIP_VIRTUALENV_BASE`` in your
        environment and setting it to the same value as that of
        ``$WORKON_HOME``.
        
        Do so by adding the line::
        
            export PIP_VIRTUALENV_BASE=$WORKON_HOME
        
        in your .bashrc under the line starting with ``export WORKON_HOME``.
        
        Using pip with buildout
        -----------------------
        
        If you are using `zc.buildout
        <http://pypi.python.org/pypi/zc.buildout>`_ you should look at
        `gp.recipe.pip <http://pypi.python.org/pypi/gp.recipe.pip>`_ as an
        option to use pip and virtualenv in your buildouts.
        
        Command line completion
        -----------------------
        
        pip comes with support for command line completion in bash and zsh and
        allows you tab complete commands and options. To enable it you simply
        need copy the required shell script to the your shell startup file
        (e.g. ``.profile`` or ``.zprofile``) by running the special ``completion``
        command, e.g. for bash::
        
            $ pip completion --bash >> ~/.profile
        
        And for zsh::
        
            $ pip completion --zsh >> ~/.zprofile
        
        Alternatively, you can use the result of the ``completion`` command
        directly with the eval function of you shell, e.g. by adding::
        
            eval "`pip completion --bash`"
        
        to your startup file.
        
        Searching for packages
        ----------------------
        
        pip can search the `Python Package Index <http://pypi.python.org/pypi>`_ (PyPI)
        for packages using the ``pip search`` command. To search, run::
        
            $ pip search "query"
        
        The query will be used to search the names and summaries of all packages
        indexed.
        
        pip searches http://pypi.python.org/pypi by default but alternative indexes
        can be searched by using the ``--index`` flag.
        
        Mirror support
        --------------
        
        The `PyPI mirroring infrastructure <http://pypi.python.org/mirrors>`_ as
        described in `PEP 381 <http://www.python.org/dev/peps/pep-0381/>`_ can be
        used by passing the ``--use-mirrors`` option to the install command.
        Alternatively, you can use the other ways to configure pip, e.g.::
        
            $ export PIP_USE_MIRRORS=true
        
        If enabled, pip will automatically query the DNS entry of the mirror index URL
        to find the list of mirrors to use. In case you want to override this list,
        please use the ``--mirrors`` option of the install command, or add to your pip
        configuration file::
        
            [install]
            use-mirrors = true
            mirrors =
                http://d.pypi.python.org
                http://b.pypi.python.org
        
        
        News / Changelog
        ================
        
        Next release (1.1) schedule
        ---------------------------
        
        Beta release mid-July 2011, final release early August.
        
        1.0.2 (2011-07-16)
        ------------------
        
        * Fixed docs issues.
        * Fixed issue #295 - Reinstall a package when using the ``install -I`` option
        * Fixed issue #283 - Finds a Git tag pointing to same commit as origin/master
        * Fixed issue #279 - Use absolute path for path to docs in setup.py
        * Fixed issue #320 - Correctly handle exceptions on Python3.
        * Fixed issue #314 - Correctly parse ``--editable`` lines in requirements files
        
        1.0.1 (2011-04-30)
        ------------------
        
        * Start to use git-flow.
        * Fixed issue #274 - `find_command` should not raise AttributeError
        * Fixed issue #273 - respect Content-Disposition header. Thanks Bradley Ayers.
        * Fixed issue #233 - pathext handling on Windows.
        * Fixed issue #252 - svn+svn protocol.
        * Fixed issue #44 - multiple CLI searches.
        * Fixed issue #266 - current working directory when running setup.py clean.
        
        1.0 (2011-04-04)
        ----------------
        
        * Added Python 3 support! Huge thanks to Vinay Sajip, Vitaly Babiy, Kelsey
          Hightower, and Alex Gronholm, among others.
        
        * Download progress only shown on a real TTY. Thanks Alex Morega.
        
        * Fixed finding of VCS binaries to not be fooled by same-named directories.
          Thanks Alex Morega.
        
        * Fixed uninstall of packages from system Python for users of Debian/Ubuntu
          python-setuptools package (workaround until fixed in Debian and Ubuntu).
        
        * Added `get-pip.py <https://raw.github.com/pypa/pip/master/contrib/get-pip.py>`_
          installer. Simply download and execute it, using the Python interpreter of
          your choice::
        
            $ curl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.py
            $ python get-pip.py
        
          This may have to be run as root.
        
          .. note::
        
              Make sure you have `distribute <http://pypi.python.org/pypi/distribute>`_
              installed before using the installer!
        
        0.8.3
        -----
        
        * Moved main repository to Github: https://github.com/pypa/pip
        
        * Transferred primary maintenance from Ian to Jannis Leidel, Carl Meyer, Brian Rosner
        
        * Fixed issue #14 - No uninstall-on-upgrade with URL package. Thanks Oliver Tonnhofer
        
        * Fixed issue #163 - Egg name not properly resolved. Thanks Igor Sobreira
        
        * Fixed issue #178 - Non-alphabetical installation of requirements. Thanks Igor Sobreira
        
        * Fixed issue #199 - Documentation mentions --index instead of --index-url. Thanks Kelsey Hightower
        
        * Fixed issue #204 - rmtree undefined in mercurial.py. Thanks Kelsey Hightower
        
        * Fixed bug in Git vcs backend that would break during reinstallation.
        
        * Fixed bug in Mercurial vcs backend related to pip freeze and branch/tag resolution.
        
        * Fixed bug in version string parsing related to the suffix "-dev".
        
        0.8.2
        -----
        
        * Avoid redundant unpacking of bundles (from pwaller)
        
        * Fixed issue #32, #150, #161 - Fixed checking out the correct
          tag/branch/commit when updating an editable Git requirement.
        
        * Fixed issue #49 - Added ability to install version control requirements
          without making them editable, e.g.::
        
            pip install git+https://github.com/pypa/pip/
        
        * Fixed issue #175 - Correctly locate build and source directory on Mac OS X.
        
        * Added ``git+https://`` scheme to Git VCS backend.
        
        0.8.1
        -----
        
        * Added global --user flag as shortcut for --install-option="--user". From
          Ronny Pfannschmidt.
        
        * Added support for `PyPI mirrors <http://pypi.python.org/mirrors>`_ as
          defined in `PEP 381 <http://www.python.org/dev/peps/pep-0381/>`_, from
          Jannis Leidel.
        
        * Fixed issue #138 - Git revisions ignored. Thanks John-Scott Atlakson.
        
        * Fixed issue #95 - Initial editable install of github package from a tag fails. Thanks John-Scott Atlakson.
        
        * Fixed issue #107 - Can't install if a directory in cwd has the same name as the package you're installing.
        
        * Fixed issue #39 - --install-option="--prefix=~/.local" ignored with -e.
          Thanks Ronny Pfannschmidt and Wil Tan.
        
        
        
        0.8
        ---
        
        * Track which ``build/`` directories pip creates, never remove directories
          it doesn't create.  From Hugo Lopes Tavares.
        
        * Pip now accepts file:// index URLs. Thanks Dave Abrahams.
        
        * Various cleanup to make test-running more consistent and less fragile.
          Thanks Dave Abrahams.
        
        * Real Windows support (with passing tests). Thanks Dave Abrahams.
        
        * ``pip-2.7`` etc. scripts are created (Python-version specific scripts)
        
        * ``contrib/build-standalone`` script creates a runnable ``.zip`` form of
          pip, from Jannis Leidel
        
        * Editable git repos are updated when reinstalled
        
        * Fix problem with ``--editable`` when multiple ``.egg-info/`` directories
          are found.
        
        * A number of VCS-related fixes for ``pip freeze``, from Hugo Lopes Tavares.
        
        * Significant test framework changes, from Hugo Lopes Tavares.
        
        0.7.2
        -----
        
        * Set zip_safe=False to avoid problems some people are encountering where
          pip is installed as a zip file.
        
        0.7.1
        -----
        
        * Fixed opening of logfile with no directory name. Thanks Alexandre Conrad.
        
        * Temporary files are consistently cleaned up, especially after
          installing bundles, also from Alex Conrad.
        
        * Tests now require at least ScriptTest 1.0.3.
        
        0.7
        ---
        
        * Fixed uninstallation on Windows
        * Added ``pip search`` command.
        * Tab-complete names of installed distributions for ``pip uninstall``.
        * Support tab-completion when there is a global-option before the
          subcommand.
        * Install header files in standard (scheme-default) location when installing
          outside a virtualenv. Install them to a slightly more consistent
          non-standard location inside a virtualenv (since the standard location is
          a non-writable symlink to the global location).
        * pip now logs to a central location by default (instead of creating
          ``pip-log.txt`` all over the place) and constantly overwrites the
          file in question. On Unix and Mac OS X this is ``'$HOME/.pip/pip.log'``
          and on Windows it's ``'%HOME%\\pip\\pip.log'``. You are still able to
          override this location with the ``$PIP_LOG_FILE`` environment variable.
          For a complete (appended) logfile use the separate ``'--log'`` command line
          option.
        * Fixed an issue with Git that left an editable packge as a checkout of a
          remote branch, even if the default behaviour would have been fine, too.
        * Fixed installing from a Git tag with older versions of Git.
        * Expand "~" in logfile and download cache paths.
        * Speed up installing from Mercurial repositories by cloning without
          updating the working copy multiple times.
        * Fixed installing directly from directories (e.g.
          ``pip install path/to/dir/``).
        * Fixed installing editable packages with ``svn+ssh`` URLs.
        * Don't print unwanted debug information when running the freeze command.
        * Create log file directory automatically. Thanks Alexandre Conrad.
        * Make test suite easier to run successfully. Thanks Dave Abrahams.
        * Fixed "pip install ." and "pip install .."; better error for directory
          without setup.py. Thanks Alexandre Conrad.
        * Support Debian/Ubuntu "dist-packages" in zip command. Thanks duckx.
        * Fix relative --src folder. Thanks Simon Cross.
        * Handle missing VCS with an error message. Thanks Alexandre Conrad.
        * Added --no-download option to install; pairs with --no-install to separate
          download and installation into two steps. Thanks Simon Cross.
        * Fix uninstalling from requirements file containing -f, -i, or
          --extra-index-url.
        * Leftover build directories are now removed. Thanks Alexandre Conrad.
        
        0.6.3
        -----
        
        * Fixed import error on Windows with regard to the backwards compatibility
          package
        
        0.6.2
        -----
        
        * Fixed uninstall when /tmp is on a different filesystem.
        
        * Fixed uninstallation of distributions with namespace packages.
        
        0.6.1
        -----
        
        * Added support for the ``https`` and ``http-static`` schemes to the
          Mercurial and ``ftp`` scheme to the Bazaar backend.
        
        * Fixed uninstallation of scripts installed with easy_install.
        
        * Fixed an issue in the package finder that could result in an
          infinite loop while looking for links.
        
        * Fixed issue with ``pip bundle`` and local files (which weren't being
          copied into the bundle), from Whit Morriss.
        
        0.6
        ---
        
        * Add ``pip uninstall`` and uninstall-before upgrade (from Carl
          Meyer).
        
        * Extended configurability with config files and environment variables.
        
        * Allow packages to be upgraded, e.g., ``pip install Package==0.1``
          then ``pip install Package==0.2``.
        
        * Allow installing/upgrading to Package==dev (fix "Source version does not
          match target version" errors).
        
        * Added command and option completion for bash and zsh.
        
        * Extended integration with virtualenv by providing an option to
          automatically use an active virtualenv and an option to warn if no active
          virtualenv is found.
        
        * Fixed a bug with pip install --download and editable packages, where
          directories were being set with 0000 permissions, now defaults to 755.
        
        * Fixed uninstallation of easy_installed console_scripts.
        
        * Fixed uninstallation on Mac OS X Framework layout installs
        
        * Fixed bug preventing uninstall of editables with source outside venv.
        
        * Creates download cache directory if not existing.
        
        0.5.1
        -----
        
        * Fixed a couple little bugs, with git and with extensions.
        
        0.5
        ---
        
        * Added ability to override the default log file name (``pip-log.txt``)
          with the environmental variable ``$PIP_LOG_FILE``.
        
        * Made the freeze command print installed packages to stdout instead of
          writing them to a file. Use simple redirection (e.g.
          ``pip freeze > stable-req.txt``) to get a file with requirements.
        
        * Fixed problem with freezing editable packages from a Git repository.
        
        * Added support for base URLs using ``<base href='...'>`` when parsing
          HTML pages.
        
        * Fixed installing of non-editable packages from version control systems.
        
        * Fixed issue with Bazaar's bzr+ssh scheme.
        
        * Added --download-dir option to the install command to retrieve package
          archives. If given an editable package it will create an archive of it.
        
        * Added ability to pass local file and directory paths to ``--find-links``,
          e.g. ``--find-links=file:///path/to/my/private/archive``
        
        * Reduced the amount of console log messages when fetching a page to find a
          distribution was problematic. The full messages can be found in pip-log.txt.
        
        * Added ``--no-deps`` option to install ignore package dependencies
        
        * Added ``--no-index`` option to ignore the package index (PyPI) temporarily
        
        * Fixed installing editable packages from Git branches.
        
        * Fixes freezing of editable packages from Mercurial repositories.
        
        * Fixed handling read-only attributes of build files, e.g. of Subversion and
          Bazaar on Windows.
        
        * When downloading a file from a redirect, use the redirected
          location's extension to guess the compression (happens specifically
          when redirecting to a bitbucket.org tip.gz file).
        
        * Editable freeze URLs now always use revision hash/id rather than tip or
          branch names which could move.
        
        * Fixed comparison of repo URLs so incidental differences such as
          presence/absence of final slashes or quoted/unquoted special
          characters don't trigger "ignore/switch/wipe/backup" choice.
        
        * Fixed handling of attempt to checkout editable install to a
          non-empty, non-repo directory.
        
        0.4
        ---
        
        * Make ``-e`` work better with local hg repositories
        
        * Construct PyPI URLs the exact way easy_install constructs URLs (you
          might notice this if you use a custom index that is
          slash-sensitive).
        
        * Improvements on Windows (from `Ionel Maries Cristian
          <http://ionelmc.wordpress.com/>`_).
        
        * Fixed problem with not being able to install private git repositories.
        
        * Make ``pip zip`` zip all its arguments, not just the first.
        
        * Fix some filename issues on Windows.
        
        * Allow the ``-i`` and ``--extra-index-url`` options in requirements
          files.
        
        * Fix the way bundle components are unpacked and moved around, to make
          bundles work.
        
        * Adds ``-s`` option to allow the access to the global site-packages if a
          virtualenv is to be created.
        
        * Fixed support for Subversion 1.6.
        
        0.3.1
        -----
        
        * Improved virtualenv restart and various path/cleanup problems on win32.
        
        * Fixed a regression with installing from svn repositories (when not
          using ``-e``).
        
        * Fixes when installing editable packages that put their source in a
          subdirectory (like ``src/``).
        
        * Improve ``pip -h``
        
        0.3
        ---
        
        * Added support for editable packages created from Git, Mercurial and Bazaar
          repositories and ability to freeze them. Refactored support for version
          control systems.
        
        * Do not use ``sys.exit()`` from inside the code, instead use a
          return.  This will make it easier to invoke programmatically.
        
        * Put the install record in ``Package.egg-info/installed-files.txt``
          (previously they went in
          ``site-packages/install-record-Package.txt``).
        
        * Fix a problem with ``pip freeze`` not including ``-e svn+`` when an
          svn structure is peculiar.
        
        * Allow ``pip -E`` to work with a virtualenv that uses a different
          version of Python than the parent environment.
        
        * Fixed Win32 virtualenv (``-E``) option.
        
        * Search the links passed in with ``-f`` for packages.
        
        * Detect zip files, even when the file doesn't have a ``.zip``
          extension and it is served with the wrong Content-Type.
        
        * Installing editable from existing source now works, like ``pip
          install -e some/path/`` will install the package in ``some/path/``.
          Most importantly, anything that package requires will also be
          installed by pip.
        
        * Add a ``--path`` option to ``pip un/zip``, so you can avoid zipping
          files that are outside of where you expect.
        
        * Add ``--simulate`` option to ``pip zip``.
        
        0.2.1
        -----
        
        * Fixed small problem that prevented using ``pip.py`` without actually
          installing pip.
        
        * Fixed ``--upgrade``, which would download and appear to install
          upgraded packages, but actually just reinstall the existing package.
        
        * Fixed Windows problem with putting the install record in the right
          place, and generating the ``pip`` script with Setuptools.
        
        * Download links that include embedded spaces or other unsafe
          characters (those characters get %-encoded).
        
        * Fixed use of URLs in requirement files, and problems with some blank
          lines.
        
        * Turn some tar file errors into warnings.
        
        0.2
        ---
        
        * Renamed to ``pip``, and to install you now do ``pip install
          PACKAGE``
        
        * Added command ``pip zip PACKAGE`` and ``pip unzip PACKAGE``.  This
          is particularly intended for Google App Engine to manage libraries
          to stay under the 1000-file limit.
        
        * Some fixes to bundles, especially editable packages and when
          creating a bundle using unnamed packages (like just an svn
          repository without ``#egg=Package``).
        
        0.1.4
        -----
        
        * Added an option ``--install-option`` to pass options to pass
          arguments to ``setup.py install``
        
        * ``.svn/`` directories are no longer included in bundles, as these
          directories are specific to a version of svn -- if you build a
          bundle on a system with svn 1.5, you can't use the checkout on a
          system with svn 1.4.  Instead a file ``svn-checkout.txt`` is
          included that notes the original location and revision, and the
          command you can use to turn it back into an svn checkout.  (Probably
          unpacking the bundle should, maybe optionally, recreate this
          information -- but that is not currently implemented, and it would
          require network access.)
        
        * Avoid ambiguities over project name case, where for instance
          MyPackage and mypackage would be considered different packages.
          This in particular caused problems on Macs, where ``MyPackage/`` and
          ``mypackage/`` are the same directory.
        
        * Added support for an environmental variable
          ``$PIP_DOWNLOAD_CACHE`` which will cache package downloads, so
          future installations won't require large downloads.  Network access
          is still required, but just some downloads will be avoided when
          using this.
        
        0.1.3
        -----
        
        * Always use ``svn checkout`` (not ``export``) so that
          ``tag_svn_revision`` settings give the revision of the package.
        
        * Don't update checkouts that came from ``.pybundle`` files.
        
        0.1.2
        -----
        
        * Improve error text when there are errors fetching HTML pages when
          seeking packages.
        
        * Improve bundles: include empty directories, make them work with
          editable packages.
        
        * If you use ``-E env`` and the environment ``env/`` doesn't exist, a
          new virtual environment will be created.
        
        * Fix ``dependency_links`` for finding packages.
        
        0.1.1
        -----
        
        * Fixed a NameError exception when running pip outside of a
          virtualenv environment.
        
        * Added HTTP proxy support (from Prabhu Ramachandran)
        
        * Fixed use of ``hashlib.md5`` on python2.5+ (also from Prabhu
          Ramachandran)
        
        0.1
        ---
        
        * Initial release
        
Keywords: easy_install distutils setuptools egg virtualenv
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Topic :: Software Development :: Build Tools
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.4
Classifier: Programming Language :: Python :: 2.5
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.1
Classifier: Programming Language :: Python :: 3.2
